version: '3.8'

services:
  client:
    build:
      context: ./web-app
      dockerfile: client/Dockerfile
      target: development
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      # DIRECTIVE 1: Bind mount source code for hot reloading
      - ./web-app/client/src:/app/src
      - ./web-app/client/public:/app/public
      - ./web-app/client/index.html:/app/index.html
      - ./web-app/client/vite.config.ts:/app/vite.config.ts
      - ./web-app/client/tailwind.config.js:/app/tailwind.config.js
      - ./web-app/client/postcss.config.js:/app/postcss.config.js
      # DIRECTIVE 2: Anonymous volume to preserve container's node_modules
      - /app/node_modules
      # Shared types
      - ./web-app/shared:/shared
    environment:
      - NODE_ENV=development
      - VITE_API_URL=http://localhost:3001
      - VITE_WS_URL=ws://localhost:3001
    depends_on:
      - server
    networks:
      - dns-bench-network

  server:
    build:
      context: ./web-app
      dockerfile: server/Dockerfile
      target: development
    restart: unless-stopped
    ports:
      - "3001:3001"
    volumes:
      # DIRECTIVE 1: Bind mount source code for hot reloading
      - ./web-app/server/src:/app/src
      - ./web-app/server/local-dns.json:/app/local-dns.json
      - ./web-app/server/public-dns.json:/app/public-dns.json
      # DIRECTIVE 2: Anonymous volume to preserve container's node_modules
      - /app/node_modules
      # Shared types
      - ./web-app/shared:/shared
      # Data directory
      - ./data:/app/data
    environment:
      - NODE_ENV=development
      - PORT=3001
      - CORS_ORIGIN=http://localhost:3000
      - DB_PATH=/app/data/dns-bench.db
      - HOST_IP=${HOST_IP:-}
      - DOCKER_HOST_IP=${HOST_IP:-}
    networks:
      - dns-bench-network
    cap_add:
      - NET_RAW
    dns:
      - 8.8.8.8
      - 1.1.1.1

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - dns-bench-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Production build services
  client-prod:
    build:
      context: ./web-app
      dockerfile: client/Dockerfile
      target: production
    restart: unless-stopped
    ports:
      - "80:80"
    depends_on:
      - server-prod
    profiles:
      - production
    networks:
      - dns-bench-network

  server-prod:
    build:
      context: ./web-app
      dockerfile: server/Dockerfile
      target: production
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - DB_PATH=/app/data/dns-bench.db
    volumes:
      - ./data:/app/data
    profiles:
      - production
    networks:
      - dns-bench-network
    cap_add:
      - NET_RAW

volumes:
  redis_data:

networks:
  dns-bench-network:
    driver: bridge